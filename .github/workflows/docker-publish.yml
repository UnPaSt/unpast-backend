name: Docker Build & Publish

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Verify submodule
        run: |
          echo "Checking submodule..."
          git submodule status
          echo ""
          echo "Verifying src/app directory..."
          ls -la src/app/ || (echo "ERROR: Submodule not initialized!" && exit 1)
          echo ""
          echo "Checking for Python files in submodule..."
          find src/app -name "*.py" | head -5 || (echo "ERROR: Submodule has no Python files!" && exit 1)
          echo ""
          echo "Checking requirements.txt in submodule..."
          ls -lh src/app/requirements.txt || (echo "ERROR: Submodule requirements.txt missing!" && exit 1)

      - name: Verify build context
        run: |
          echo "Files in build context (src/):"
          ls -lah src/
          echo ""
          echo "Files in src/app/ (submodule):"
          ls -lah src/app/ | head -15
          echo ""
          echo "Python package structure:"
          find src/app/unpast -type f -name "*.py" | head -10 || echo "Warning: unpast package not found"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build summary
        run: |
          echo "## Docker Build Complete! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "> Built but not pushed (PR build)" >> $GITHUB_STEP_SUMMARY
          else
            echo "> Image pushed to registry" >> $GITHUB_STEP_SUMMARY
          fi
